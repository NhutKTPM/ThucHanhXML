from lxml import etree
import os
import mysql.connector
from mysql.connector import Error

def parse_xsd_and_validate():
    """
    Parse XSD file, create XMLSchema object and validate XML with XSD
    """
    try:
        # ƒê∆∞·ªùng d·∫´n ƒë·∫øn c√°c file
        xsd_file = "Buoi_6/tmdt.xsd"
        xml_file = "Buoi_6/tmdt.xml"
        
        # Ki·ªÉm tra xem file c√≥ t·ªìn t·∫°i kh√¥ng
        if not os.path.exists(xsd_file):
            print(f"File XSD kh√¥ng t·ªìn t·∫°i: {xsd_file}")
            return False, None
            
        if not os.path.exists(xml_file):
            print(f"File XML kh√¥ng t·ªìn t·∫°i: {xml_file}")
            return False, None
        
        print("1. ƒê·ªçc v√† parse file XSD...")
        # ƒê·ªçc file XSD
        with open(xsd_file, 'r', encoding='utf-8') as f:
            xsd_content = f.read()
            print(f"N·ªôi dung XSD ƒë√£ ƒë∆∞·ª£c ƒë·ªçc ({len(xsd_content)} k√Ω t·ª±)")
        
        # Parse XSD content
        xsd_doc = etree.fromstring(xsd_content.encode('utf-8'))
        print("XSD ƒë√£ ƒë∆∞·ª£c parse th√†nh c√¥ng")
        
        print("\n2. T·∫°o XMLSchema object t·ª´ XSD...")
        # T·∫°o XMLSchema object
        xmlschema = etree.XMLSchema(xsd_doc)
        print("XMLSchema object ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng")
        
        print("\n3. ƒê·ªçc v√† parse file XML...")
        # ƒê·ªçc v√† parse file XML
        xml_doc = etree.parse(xml_file)
        print("XML ƒë√£ ƒë∆∞·ª£c parse th√†nh c√¥ng")
        
        print("\n4. Validation XML v·ªõi XSD...")
        # Validate XML v·ªõi XSD
        is_valid = xmlschema.validate(xml_doc)
        
        if is_valid:
            print("‚úÖ XML h·ª£p l·ªá theo XSD schema!")
            return True, xml_doc
        else:
            print("‚ùå XML kh√¥ng h·ª£p l·ªá theo XSD schema!")
            print("C√°c l·ªói validation:")
            for error in xmlschema.error_log:
                print(f"  - D√≤ng {error.line}: {error.message}")
            return False, None
        
    except etree.XMLSyntaxError as e:
        print(f"L·ªói c√∫ ph√°p XML/XSD: {e}")
        return False, None
    except etree.XMLSchemaParseError as e:
        print(f"L·ªói parse XSD schema: {e}")
        return False, None
    except Exception as e:
        print(f"L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")
        return False, None

def connect_to_database():
    """
    K·∫øt n·ªëi ƒë·∫øn MySQL database
    """
    try:
        connection = mysql.connector.connect(
            host='localhost',
            database='xml_tmdt',
            user='root',  # Thay ƒë·ªïi username c·ªßa b·∫°n
            password='root',  # Thay ƒë·ªïi password c·ªßa b·∫°n
            charset='utf8mb4'
        )
        
        if connection.is_connected():
            print("‚úÖ K·∫øt n·ªëi database th√†nh c√¥ng!")
            return connection
            
    except Error as e:
        print(f"‚ùå L·ªói k·∫øt n·ªëi database: {e}")
        # Th·ª≠ t·∫°o database n·∫øu ch∆∞a t·ªìn t·∫°i
        try:
            temp_connection = mysql.connector.connect(
                host='localhost',
                user='root',
                password='',
                charset='utf8mb4'
            )
            cursor = temp_connection.cursor()
            cursor.execute("CREATE DATABASE IF NOT EXISTS tmdt_db CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci")
            cursor.close()
            temp_connection.close()
            print("Database tmdt_db ƒë√£ ƒë∆∞·ª£c t·∫°o")
            
            # Th·ª≠ k·∫øt n·ªëi l·∫°i
            return connect_to_database()
            
        except Error as create_error:
            print(f"‚ùå Kh√¥ng th·ªÉ t·∫°o database: {create_error}")
            return None

def create_tables(connection):
    """
    T·∫°o c√°c b·∫£ng category v√† product n·∫øu ch∆∞a t·ªìn t·∫°i
    """
    try:
        cursor = connection.cursor()
        
        # T·∫°o b·∫£ng categories
        create_categories_table = """
        CREATE TABLE IF NOT EXISTS categories (
            id VARCHAR(50) PRIMARY KEY,
            name VARCHAR(255) NOT NULL,
            description TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        ) ENGINE=InnoDB CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci
        """
        
        # T·∫°o b·∫£ng products
        create_products_table = """
        CREATE TABLE IF NOT EXISTS products (
            id VARCHAR(50) PRIMARY KEY,
            name VARCHAR(255) NOT NULL,
            description TEXT,
            price DECIMAL(10,2) NOT NULL,
            currency VARCHAR(10) DEFAULT 'USD',
            stock INT DEFAULT 0,
            category_id VARCHAR(50),
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (category_id) REFERENCES categories(id) ON DELETE SET NULL
        ) ENGINE=InnoDB CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci
        """
        
        cursor.execute(create_categories_table)
        cursor.execute(create_products_table)
        connection.commit()
        
        print("‚úÖ C√°c b·∫£ng ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")
        cursor.close()
        return True
        
    except Error as e:
        print(f"‚ùå L·ªói t·∫°o b·∫£ng: {e}")
        return False

def extract_data_with_xpath(xml_doc):
    """
    S·ª≠ d·ª•ng XPath ƒë·ªÉ tr√≠ch xu·∫•t d·ªØ li·ªáu t·ª´ XML
    """
    try:
        root = xml_doc.getroot()
        
        # Tr√≠ch xu·∫•t categories
        categories = []
        category_elements = root.xpath('//categories/category')
        
        for i, category_elem in enumerate(category_elements):
            category_id = category_elem.get('id', f'cat_{i+1}')
            category_name = category_elem.text.strip() if category_elem.text else f'Category {i+1}'
            categories.append({
                'id': category_id,
                'name': category_name,
                'description': f'Description for {category_name}'
            })
        
        print(f"üìã T√¨m th·∫•y {len(categories)} categories:")
        for cat in categories:
            print(f"  - {cat['id']}: {cat['name']}")
        
        # Tr√≠ch xu·∫•t products
        products = []
        product_elements = root.xpath('//products/product')
        
        for i, product_elem in enumerate(product_elements):
            product_id = product_elem.get('id', f'prod_{i+1}')
            category_ref = product_elem.get('categoryRef')
            
            # L·∫•y th√¥ng tin s·∫£n ph·∫©m
            name_elem = product_elem.xpath('./name')[0] if product_elem.xpath('./name') else None
            description_elem = product_elem.xpath('./description')[0] if product_elem.xpath('./description') else None
            price_elem = product_elem.xpath('./price')[0] if product_elem.xpath('./price') else None
            stock_elem = product_elem.xpath('./stock')[0] if product_elem.xpath('./stock') else None
            
            product = {
                'id': product_id,
                'name': name_elem.text.strip() if name_elem is not None and name_elem.text else f'Product {i+1}',
                'description': description_elem.text.strip() if description_elem is not None and description_elem.text else None,
                'price': float(price_elem.text) if price_elem is not None and price_elem.text else 0.0,
                'currency': price_elem.get('currency', 'USD') if price_elem is not None else 'USD',
                'stock': int(stock_elem.text) if stock_elem is not None and stock_elem.text else 0,
                'category_id': category_ref
            }
            products.append(product)
        
        print(f"üì¶ T√¨m th·∫•y {len(products)} products:")
        for prod in products:
            print(f"  - {prod['id']}: {prod['name']} (${prod['price']} {prod['currency']})")
        
        return categories, products
        
    except Exception as e:
        print(f"‚ùå L·ªói tr√≠ch xu·∫•t d·ªØ li·ªáu: {e}")
        return [], []

def insert_data_to_database(connection, categories, products):
    """
    Insert d·ªØ li·ªáu v√†o database
    """
    try:
        cursor = connection.cursor()
        
        # X√≥a d·ªØ li·ªáu c≈© (n·∫øu c√≥)
        cursor.execute("DELETE FROM products")
        cursor.execute("DELETE FROM categories")
        
        # Insert categories
        insert_category_query = """
        INSERT INTO categories (id, name, description) 
        VALUES (%s, %s, %s)
        """
        
        for category in categories:
            cursor.execute(insert_category_query, (
                category['id'],
                category['name'],
                category['description']
            ))
        
        print(f"‚úÖ ƒê√£ insert {len(categories)} categories")
        
        # Insert products
        insert_product_query = """
        INSERT INTO products (id, name, description, price, currency, stock, category_id) 
        VALUES (%s, %s, %s, %s, %s, %s, %s)
        """
        
        for product in products:
            cursor.execute(insert_product_query, (
                product['id'],
                product['name'],
                product['description'],
                product['price'],
                product['currency'],
                product['stock'],
                product['category_id']
            ))
        
        print(f"‚úÖ ƒê√£ insert {len(products)} products")
        
        connection.commit()
        cursor.close()
        
        print("‚úÖ T·∫•t c·∫£ d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c insert th√†nh c√¥ng!")
        return True
        
    except Error as e:
        print(f"‚ùå L·ªói insert d·ªØ li·ªáu: {e}")
        connection.rollback()
        return False

def display_database_data(connection):
    """
    Hi·ªÉn th·ªã d·ªØ li·ªáu t·ª´ database ƒë·ªÉ ki·ªÉm tra
    """
    try:
        cursor = connection.cursor()
        
        print("\n" + "="*60)
        print("D·ªÆ LI·ªÜU TRONG DATABASE")
        print("="*60)
        
        # Hi·ªÉn th·ªã categories
        cursor.execute("SELECT * FROM categories")
        categories = cursor.fetchall()
        
        print("\nüìã CATEGORIES:")
        print("-" * 50)
        for cat in categories:
            print(f"ID: {cat[0]}, Name: {cat[1]}, Description: {cat[2]}")
        
        # Hi·ªÉn th·ªã products v·ªõi join category
        cursor.execute("""
            SELECT p.id, p.name, p.description, p.price, p.currency, 
                   p.stock, c.name as category_name
            FROM products p
            LEFT JOIN categories c ON p.category_id = c.id
        """)
        products = cursor.fetchall()
        
        print("\nüì¶ PRODUCTS:")
        print("-" * 50)
        for prod in products:
            print(f"ID: {prod[0]}, Name: {prod[1]}")
            print(f"    Price: ${prod[3]} {prod[4]}, Stock: {prod[5]}")
            print(f"    Category: {prod[6] or 'No category'}")
            print(f"    Description: {prod[2] or 'No description'}")
            print()
        
        cursor.close()
        
    except Error as e:
        print(f"‚ùå L·ªói hi·ªÉn th·ªã d·ªØ li·ªáu: {e}")

if __name__ == "__main__":
    print("CH∆Ø∆†NG TR√åNH VALIDATION XML V·ªöI XSD V√Ä INSERT V√ÄO DATABASE")
    print("="*70)
    
    # 1. Validation XML v·ªõi XSD
    print("\n1. Validation XML v·ªõi XSD:")
    is_valid, xml_doc = parse_xsd_and_validate()
    
    if not is_valid:
        print("‚ùå XML kh√¥ng h·ª£p l·ªá. D·ª´ng ch∆∞∆°ng tr√¨nh.")
        exit(1)
    
    # 2. K·∫øt n·ªëi database
    print("\n2. K·∫øt n·ªëi ƒë·∫øn MySQL database:")
    connection = connect_to_database()
    
    if not connection:
        print("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi database. D·ª´ng ch∆∞∆°ng tr√¨nh.")
        exit(1)
    
    try:
        # 3. T·∫°o tables
        print("\n3. T·∫°o c√°c b·∫£ng trong database:")
        if not create_tables(connection):
            print("‚ùå Kh√¥ng th·ªÉ t·∫°o b·∫£ng. D·ª´ng ch∆∞∆°ng tr√¨nh.")
            exit(1)
        
        # 4. Tr√≠ch xu·∫•t d·ªØ li·ªáu b·∫±ng XPath
        print("\n4. Tr√≠ch xu·∫•t d·ªØ li·ªáu t·ª´ XML b·∫±ng XPath:")
        categories, products = extract_data_with_xpath(xml_doc)
        
        if not categories and not products:
            print("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ insert.")
            exit(1)
        
        # 5. Insert d·ªØ li·ªáu v√†o database
        print("\n5. Insert d·ªØ li·ªáu v√†o database:")
        if insert_data_to_database(connection, categories, products):
            # 6. Hi·ªÉn th·ªã d·ªØ li·ªáu ƒë√£ insert
            display_database_data(connection)
        
    finally:
        # ƒê√≥ng k·∫øt n·ªëi
        if connection.is_connected():
            connection.close()
            print("\nüîê ƒê√£ ƒë√≥ng k·∫øt n·ªëi database")
    
    print("\n" + "="*70)
    print("HO√ÄN TH√ÄNH!")
    print("="*70)